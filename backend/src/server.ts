import express from 'express';
import cors from 'cors';
import path from 'path';
import http from 'http';
import { Server as SocketIOServer } from 'socket.io';

import ticketRoutes from './routes/ticketRoutes';
import notificationsRouter from './routes/notifications';

import staffNotificationRoutes from './routes/Staffnotifications'

const app = express();
const port = 3000;

// ‚è´ ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP server
const server = http.createServer(app);

// ‚è´ ‡∏™‡∏£‡πâ‡∏≤‡∏á socket.io instance
const io = new SocketIOServer(server, {
  cors: {
    origin: '*', // ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô production!
  },
});

// ‚è´ Map ‡πÄ‡∏Å‡πá‡∏ö socket.id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
const connectedUsers = new Map<number, string>();

// ‚è´ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á client
io.on('connection', (socket) => {
  console.log('‚úÖ Client connected:', socket.id);

  socket.on('register', (userId: number) => {
    connectedUsers.set(userId, socket.id);
    console.log(`üìå Registered user ${userId} with socket ${socket.id}`);
  });

  socket.on('disconnect', () => {
    for (const [userId, sid] of connectedUsers.entries()) {
      if (sid === socket.id) {
        connectedUsers.delete(userId);
        console.log(`‚ùå User ${userId} disconnected`);
        break;
      }
    }
  });
});

// üåê Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// üìå Routes
app.use('/api/tickets', ticketRoutes);
app.use('/api/notifications', notificationsRouter);

app.use('/api/staff-notifications', staffNotificationRoutes);


// üü¢ Export WebSocket instance ‡πÉ‡∏´‡πâ routes ‡πÉ‡∏ä‡πâ
export { io, connectedUsers };

// üöÄ Start server
server.listen(port, () => {
  console.log(`‚úÖ Server is running at http://localhost:${port}`);
});
